from pyrogram import Client, filters
from pyrogram.types import Message
import random
import os
from datetime import datetime
from config import OWNER_ID

def luhn_algorithm(cc_num):
    def digits_of(n):
        return [int(d) for d in str(n)]
    digits = digits_of(cc_num)
    odd_digits = digits[-1::-2]
    even_digits = digits[-2::-2]
    checksum = sum(odd_digits)
    for d in even_digits:
        checksum += sum(digits_of(d*2))
    return checksum % 10 == 0

def generate_luhn_valid_cc(bin, length):
    cc_number = [int(x) for x in bin]
    while len(cc_number) < (length - 1):
        cc_number.append(random.randint(0, 9))
    checksum = 0
    cc_number.append(checksum)
    for i in range(length - 2, -1, -2):
        cc_number[i] *= 2
        if cc_number[i] > 9:
            cc_number[i] -= 9
    checksum = (10 - (sum(cc_number) % 10)) % 10
    cc_number[-1] = checksum
    return ''.join(map(str, cc_number))

def generate_random_expiry():
    year = random.randint(datetime.now().year, datetime.now().year + 5)
    month = random.randint(1, 12)
    return f"{month:02d}/{year % 100:02d}"

def generate_random_cvv():
    return f"{random.randint(100, 999)}"

@app.on_message(filters.command(["gen", "ccgen"], [".", "!", "/"]))
async def gen_cc(client: Client, message: Message):
    if len(message.command) < 2:
        return await message.reply_text(
            "**🔔 Please provide a BIN to generate credit cards... 💳**\n `/gen 123456`"
        )
    try:
        await message.delete()
    except:
        pass
    aux = await message.reply_text("**Generating... ☢️**")
    parts = message.text.split(None, 2)
    bin = parts[1]
    card_count = int(parts[2]) if len(parts) > 2 else 10

    if len(bin) < 6:
        return await aux.edit("**🚫 Wrong BIN ⚠️...**")
    
    if card_count > 3000:
        return await aux.edit("**🚫 Maximum limit of 3000 cards reached ⚠️...**")
    
    try:
        if len(parts) > 2:
            # Generate the specified number of cards and write to a file
            cards = [generate_luhn_valid_cc(bin, 16) for _ in range(card_count)]
            file_name = "genccby@Miss_YumiPro_Bot.txt"
            with open(file_name, "w") as file:
                for card in cards:
                    expm, expy = generate_random_expiry().split("/")
                    cvv = generate_random_cvv()
                    file.write(f"{card}|{expm}|{expy}|{cvv}\n")
            
            await aux.edit(f"""
❅────────✧𝗖𝗖 𝗚𝗘𝗡𝗘𝗥𝗔𝗧𝗢𝗥✧────────❅

**⚠️ Algorithm: Luhn**

**🪪 Generated By:** {message.from_user.first_name}

**💳 BIN:** `{bin}`
**🪪 Dev:** <a href="tg://user?id={OWNER_ID}">Owner</a>
**⏳ Time Taken:** `{datetime.now() - message.date}`

**🔗 Download the file with generated cards:** [Here](<genccby@Miss_YumiPro_Bot.txt>)
            """)
            
            # Optionally, send the file to the user
            await client.send_document(message.chat.id, file_name)
            os.remove(file_name)
        
        else:
            # Generate 10 cards and send as a message in the specified format
            cards = [generate_luhn_valid_cc(bin, 16) for _ in range(10)]
            exp_and_cvv = [f"{generate_random_expiry()}|{generate_random_cvv()}" for _ in range(10)]
            ccards = [f"{cards[i]}|{exp_and_cvv[i]}" for i in range(10)]
            name = message.from_user.first_name
            await aux.edit(f"""
❅ ✧ 𝗕𝗥𝗢𝗞𝗘𝗡 𝗫 𝗖𝗖 𝗚𝗘𝗡𝗘𝗥𝗔𝗧𝗢𝗥 ✧ ❅

`{ccards[0]}`\n`{ccards[1]}`\n`{ccards[2]}`
`{ccards[3]}`\n`{ccards[4]}`\n`{ccards[5]}`
`{ccards[6]}`\n`{ccards[7]}`\n`{ccards[8]}`
`{ccards[9]}`

**⚠️ Algorithm: Luhn**

**🪪 Generated By:** {name}

**💳 BIN:** `{bin}`
**🪪 Dev:** <a href="tg://user?id={OWNER_ID}"『𝔐𝔯』〆𝔅𝔯𝔬𝔨𝔢𝔫™</a>
**⏳ Time Taken:** `{datetime.now() - message.date}`
            """)
    except Exception as e:
        return await aux.edit(f"**Error:** `{e}`")
